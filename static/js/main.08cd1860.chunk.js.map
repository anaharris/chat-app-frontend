{"version":3,"sources":["components/login-logo.png","components/signup-logo.png","components/welcome.gif","components/withLoader.js","redux/reducer.js","redux/store.js","redux/actions.js","components/Login.js","components/Signup.js","components/Message.js","components/Input.js","components/MessagesContainer.js","components/Conversation.js","components/ConversationsContainer.js","components/BotInfo.js","components/ConversationInfo.js","components/Homepage.js","components/NotFound.js","components/NewConversation.js","components/BotForm.js","components/Profile.js","components/Navbar.js","App.js","serviceWorker.js","index.js","components/logo-pink.png"],"names":["module","exports","__webpack_require__","p","withLoadingSpinner","WrappedComponent","_Component","_class","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loading","inherits","createClass","key","value","_componentDidMount","asyncToGenerator","regenerator_default","a","mark","_callee","_this2","wrap","_context","prev","next","setTimeout","setState","err","console","log","stop","apply","arguments","react_default","createElement","id","src","logo","alt","Component","Cookies","require","rootReducer","combineReducers","messageInput","length","undefined","action","type","userData","expire","newConversations","conversations","slice","push","conversation","objectSpread","selectedConversation","message","newMessages","messages","newBots","bots","bot","allUsers","allBots","concat","toConsumableArray","conversationModal","newBotModal","profileModal","store","createStore","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","API_URL","createSocket","dispatch","token","get","url","App","cable","ActionCable","createConsumer","messagesSubscription","subscriptions","create","channel","conversation_id","getState","connected","disconnected","received","data","Login","document","body","style","background","currentUser","Redirect","to","className","Grid","columns","centered","paddingTop","Row","verticalAlign","Column","Image","size","floated","Form","onSubmit","e","target","username","password","Segment","stacked","Input","name","fluid","icon","iconPosition","placeholder","Button","backgroundColor","color","Message_Message","textAlign","Link","connect","user","fetch","method","headers","Content-Type","JSON","stringify","then","res","json","error","alert","set","jwt","loggingIn","Signup","Message","List","Item","marginBottom","avatar","Content","Header","user_name","Description","content","text","onChange","preventDefault","onKeyDown","keyCode","send","sendMessage","sendingMessage","MessagesContainer","width","height","overflowY","map","m","components_Message","components_Input","welcome","Conversation","onClick","topic","fetchingConversation","ConversationContainer","c","components_Conversation","BotInfo","open","onButtonClick","payload","bot_id","addingBot","Modal","trigger","Dropdown","image","wrapped","response","Actions","Accept","Authorization","botConversation","ConversationInfo","filter","includes","users","inverted","Menu","components_BotInfo","Homepage","fetchingAllBots","padded","ConversationsContainer","components_MessagesContainer","components_ConversationInfo","NotFound","fontSize","NewConversation","userId","inputChange","dropdownChange","formSubmit","creatingNewConversation","closeNewConversationModal","fetchingAllUsers","filteredUsers","control","Select","selection","options","conversationData","user_id","parseInt","resData","userConversation","BotForm","handleName","handleTrigger","handleResponse","handleAvatar","creatingNewBot","closeNewBotModal","Profile","closeProfileModal","Navbar","homepage","openNewConversationModal","onClose","components_NewConversation","openNewBotModal","components_BotForm","position","openProfileModal","components_Profile","logout","checkingUser","react","Sticky","components_Navbar","BrowserRouter","basename","process","Switch","Route","exact","path","render","components_Login","component","components_Homepage","withLoader","withRouter","Boolean","location","hostname","match","ReactDOM","es","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,6DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wTCyCzBC,MA9Bf,SAA4BC,GAC1B,gBAAAC,GACE,SAAAC,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,SAAS,GAHMR,EADrB,OAAAC,OAAAQ,EAAA,EAAAR,CAAAH,EAAAD,GAAAI,OAAAS,EAAA,EAAAT,CAAAH,EAAA,EAAAa,IAAA,oBAAAC,MAAA,eAAAC,EAAAZ,OAAAa,EAAA,EAAAb,CAAAc,EAAAC,EAAAC,KAAA,SAAAC,IAAA,IAAAC,EAAAhB,KAAA,OAAAY,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OASI,IACEC,WAAW,WACVL,EAAKM,SAAS,CACZjB,SAAS,KAEV,KACH,MAAMkB,GACNC,QAAQC,IAAIF,GACZvB,KAAKsB,SAAS,CAAEjB,SAAS,IAjB9B,wBAAAa,EAAAQ,SAAAX,EAAAf,SAAA,yBAAAU,EAAAiB,MAAA3B,KAAA4B,YAAA,KAAApB,IAAA,SAAAC,MAAA,WAsBI,OAAIT,KAAKI,MAAMC,QA7BjBwB,EAAAhB,EAAAiB,cAAA,OAAKC,GAAG,sBACNF,EAAAhB,EAAAiB,cAAA,OAAKC,GAAG,eAAeC,IAAKC,IAAMC,IAAI,iBA6B/BL,EAAAhB,EAAAiB,cAACrC,EAAqBO,KAAKJ,WAvBtCD,EAAA,CAAqBwC,iICXjBC,EAAUC,EAAQ,IAsHTC,EAXKC,YAAgB,CAClCC,aAzGqB,WAAwB,IAAvBpC,EAAuBwB,UAAAa,OAAA,QAAAC,IAAAd,UAAA,GAAAA,UAAA,GAAf,GAAIe,EAAWf,UAAAa,OAAA,EAAAb,UAAA,QAAAc,EAC7C,OAAQC,EAAOC,MACb,IAAK,eAEH,OADFpB,QAAQC,IAAI,OAAQkB,EAAOH,cAClBG,EAAOH,aAChB,QACE,OAAOpC,IAoGXyC,SAhGkB,WAA0B,IAAzBzC,EAAyBwB,UAAAa,OAAA,QAAAC,IAAAd,UAAA,GAAAA,UAAA,GAAjB,KAAMe,EAAWf,UAAAa,OAAA,EAAAb,UAAA,QAAAc,EAC5C,OAAQC,EAAOC,MACb,IAAK,YACH,OAAOD,EAAOE,SAChB,IAAK,aAEH,OADAT,EAAQU,OAAO,SACR,KACT,IAAK,eACH,OAAOH,EAAOE,SAChB,IAAK,mBACHrB,QAAQC,IAAIkB,GACZ,IAAII,EAAmB3C,EAAM4C,cAAcC,QAE3C,OADAF,EAAiBG,KAAKP,EAAOQ,cACtBrD,OAAAsD,EAAA,EAAAtD,CAAA,GAAIM,EAAX,CAAkB4C,cAAeD,IACnC,QACE,OAAO3C,IAkFXiD,qBA9EkC,WAA0B,IAAzBjD,EAAyBwB,UAAAa,OAAA,QAAAC,IAAAd,UAAA,GAAAA,UAAA,GAAjB,KAAMe,EAAWf,UAAAa,OAAA,EAAAb,UAAA,QAAAc,EAC5D,OAAQC,EAAOC,MACb,IAAK,uBACH,OAAOD,EAAOU,qBAChB,IAAK,kBACL7B,QAAQC,IAAI,WAAYkB,EAAOW,SAC7B,IAAIC,EAAcnD,EAAMoD,SAASP,QAEjC,OADAM,EAAYL,KAAKP,EAAOW,SACjBxD,OAAAsD,EAAA,EAAAtD,CAAA,GAAIM,EAAX,CAAkBoD,SAAUD,IAC9B,IAAK,4BACH,IAAIE,EAAUrD,EAAMsD,KAAKT,QAEzB,OADAQ,EAAQP,KAAKP,EAAOgB,KACb7D,OAAAsD,EAAA,EAAAtD,CAAA,GAAIM,EAAX,CAAkBsD,KAAMD,IAC1B,IAAK,WACH,OAAO,KACT,QACE,OAAOrD,IA+DXwD,SA3DsB,WAAwB,IAAvBxD,EAAuBwB,UAAAa,OAAA,QAAAC,IAAAd,UAAA,GAAAA,UAAA,GAAf,GAAIe,EAAWf,UAAAa,OAAA,EAAAb,UAAA,QAAAc,EAC9C,OAAQC,EAAOC,MACb,IAAK,oBACH,OAAOD,EAAOiB,SAChB,QACE,OAAOxD,IAuDXyD,QAjBqB,WAAwB,IAAvBzD,EAAuBwB,UAAAa,OAAA,QAAAC,IAAAd,UAAA,GAAAA,UAAA,GAAf,GAAIe,EAAWf,UAAAa,OAAA,EAAAb,UAAA,QAAAc,EAC7C,OAAQC,EAAOC,MACb,IAAK,mBACH,OAAOD,EAAOe,KAChB,IAAK,kBACH,SAAAI,OAAAhE,OAAAiE,EAAA,EAAAjE,CAAWM,GAAX,CAAkBuC,EAAOgB,MAC3B,QACE,OAAOvD,IAWX4D,kBApD+B,WAA2B,IAA1B5D,EAA0BwB,UAAAa,OAAA,QAAAC,IAAAd,UAAA,IAAAA,UAAA,GAC1D,QAD0DA,UAAAa,OAAA,EAAAb,UAAA,QAAAc,GAC3CE,MACb,IAAK,wBACH,OAAO,EACT,IAAK,yBACH,OAAO,EACT,QACE,OAAOxC,IA8CX6D,YA1CsB,WAA2B,IAA1B7D,EAA0BwB,UAAAa,OAAA,QAAAC,IAAAd,UAAA,IAAAA,UAAA,GACjD,QADiDA,UAAAa,OAAA,EAAAb,UAAA,QAAAc,GAClCE,MACb,IAAK,eACH,OAAO,EACT,IAAK,gBACH,OAAO,EACT,QACE,OAAOxC,IAoCX8D,aA/B0B,WAA2B,IAA1B9D,EAA0BwB,UAAAa,OAAA,QAAAC,IAAAd,UAAA,IAAAA,UAAA,GACrD,QADqDA,UAAAa,OAAA,EAAAb,UAAA,QAAAc,GACtCE,MACb,IAAK,qBACH,OAAO,EACT,IAAK,sBACH,OAAO,EACT,QACE,OAAOxC,eCnFE+D,EALDC,YAAY9B,EAAa+B,YACrCC,YAAgBC,KAChBC,OAAOC,8BAAgCD,OAAOC,iCCJ1CrC,EAAUC,EAAQ,IAClBqC,EAAU,gCAuDVC,EAAe,WACnB,OAAO,SAACC,GACN,IAAMC,EAAQzC,EAAQ0C,IAAI,SACpBC,EAAG,MAAAjB,OAASY,EAAT,UACLM,EAAM,GACVA,EAAIC,MAAQC,IAAYC,eAAZ,GAAArB,OAA8BiB,EAA9B,WAAAjB,OAA2Ce,IAEvD,IAAMO,EAAuBJ,EAAIC,MAAMI,cAAcC,OAAO,CAACC,QAAS,kBAAmBC,gBAAiBrB,EAAMsB,WAAWpC,sBAAuB,CAChJqC,UAAW,WACTlE,QAAQC,IAAI,iCAEdkE,aAAc,WACZnE,QAAQC,IAAI,sCAEdmE,SAAU,SAACC,GAITjB,EApB6B,CAAChC,KAAM,kBAAmBU,QAoB/BuC,OAG1BrE,QAAQC,IAAI,UACZuD,EAAIhC,cAAgB,CAACoC,GACrBZ,OAAOQ,IAAMA,sBC3Eb5C,EAAUC,EAAQ,IAGlByD,8LAGFC,SAASC,KAAKC,MAAMC,WAAa,2CAG1B,IAAArG,EAAAG,KACP,OACEoC,EAAQ0C,IAAI,UAAY9E,KAAKJ,MAAMuG,YAActE,EAAAhB,EAAAiB,cAACsE,EAAA,EAAD,CAAUC,GAAG,mBAC9DxE,EAAAhB,EAAAiB,cAAA,OAAKwE,UAAU,oBACbzE,EAAAhB,EAAAiB,cAACyE,EAAA,EAAD,CAAMC,QAAS,EAAGC,UAAQ,EAACR,MAAO,CAACS,WAAY,OAC/C7E,EAAAhB,EAAAiB,cAACyE,EAAA,EAAKI,IAAN,CAAUC,cAAc,OACtB/E,EAAAhB,EAAAiB,cAACyE,EAAA,EAAKM,OAAN,KACEhF,EAAAhB,EAAAiB,cAACgF,EAAA,EAAD,CAAOC,KAAK,OAAOC,QAAQ,QAAQhF,IAAKC,QAG1CJ,EAAAhB,EAAAiB,cAACyE,EAAA,EAAKI,IAAN,CAAUC,cAAc,UACxB/E,EAAAhB,EAAAiB,cAACyE,EAAA,EAAKM,OAAN,KACIhF,EAAAhB,EAAAiB,cAACmF,EAAA,EAAD,CACEF,KAAK,MACLG,SAAU,SAACC,GAAOtH,EAAKD,MAAMsH,SAASC,EAAEC,OAAOC,SAAS5G,MAAO0G,EAAEC,OAAOE,SAAS7G,SACjFoB,EAAAhB,EAAAiB,cAACyF,EAAA,EAAD,CAASC,SAAO,GACd3F,EAAAhB,EAAAiB,cAACmF,EAAA,EAAKQ,MAAN,CACEC,KAAK,WACLC,OAAK,EAACC,KAAK,OACXC,aAAa,OACbC,YAAY,aAEdjG,EAAAhB,EAAAiB,cAACmF,EAAA,EAAKQ,MAAN,CACCC,KAAK,WACLC,OAAK,EACLC,KAAK,OACLC,aAAa,OACbC,YAAY,WACZlF,KAAK,WACLqD,MAAO,CAACC,WAAY,aAErBrE,EAAAhB,EAAAiB,cAACiG,EAAA,EAAD,CACE9B,MAAO,CAAC+B,gBAAiB,UAAWC,MAAO,WAC3CN,OAAK,EACLZ,KAAK,QACLnE,KAAK,UAJP,WAQJf,EAAAhB,EAAAiB,cAACoG,EAAA,EAAD,CAASjC,MAAO,CAACkC,UAAW,WAA5B,cACetG,EAAAhB,EAAAiB,cAACsG,EAAA,EAAD,CAAMnC,MAAO,CAACgC,MAAO,WAAY5B,GAAG,WAApC,uBA9CTlE,aAqELkG,cAbS,SAAAjI,GACtB,MAAO,CACL+F,YAAa/F,EAAMyC,WAII,SAAA+B,GACzB,MAAO,CACLsC,SAAU,SAACG,EAAUC,GAAc1C,EDlErB,SAACyC,EAAUC,GAC3B,OAAO,SAAC1C,GACN,IAAMG,EAAG,GAAAjB,OAAMY,EAAN,UACPmB,EAAO,CAAEyC,KAAM,CAACjB,SAAUA,EAAUC,SAAUA,IAClDiB,MAAMxD,EAAK,CACTyD,OAAQ,OACRC,QAAS,CACPC,eAAgB,oBAElB1C,KAAM2C,KAAKC,UAAU/C,KACpBgD,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAhD,GACAA,EAAKmD,MACPC,MAAMpD,EAAKvC,UAEXlB,EAAQ8G,IAAI,QAASrD,EAAKsD,KAC1BvE,EAlBwB,CAAChC,KAAM,YAAaC,SAkB1BgD,EAAKyC,WCkDiBc,CAAU/B,EAAUC,OAKrDe,CAA6CvC,qBC1EtD1D,EAAUC,EAAQ,IAsETgH,8LAjEXtD,SAASC,KAAKC,MAAMC,WAAa,2CAI1B,IAAArG,EAAAG,KACP,OACEoC,EAAQ0C,IAAI,UAAY9E,KAAKJ,MAAMuG,YAActE,EAAAhB,EAAAiB,cAACsE,EAAA,EAAD,CAAUC,GAAG,mBAC9DxE,EAAAhB,EAAAiB,cAACyE,EAAA,EAAD,CAAMC,QAAS,EAAGC,UAAQ,EAACR,MAAO,CAACS,WAAY,OAC7C7E,EAAAhB,EAAAiB,cAACyE,EAAA,EAAKI,IAAN,CAAUC,cAAc,OACtB/E,EAAAhB,EAAAiB,cAACyE,EAAA,EAAKM,OAAN,KACEhF,EAAAhB,EAAAiB,cAACgF,EAAA,EAAD,CAAOC,KAAK,OAAOC,QAAQ,QAAQhF,IAAKC,QAI5CJ,EAAAhB,EAAAiB,cAACyE,EAAA,EAAKI,IAAN,CAAUC,cAAc,UACxB/E,EAAAhB,EAAAiB,cAACyE,EAAA,EAAKM,OAAN,KACIhF,EAAAhB,EAAAiB,cAACmF,EAAA,EAAD,CACEF,KAAK,QACLG,SAAU,SAACC,GAAOtH,EAAKD,MAAMsH,SAASC,EAAEC,OAAOC,SAAS5G,MAAO0G,EAAEC,OAAOE,SAAS7G,SACjFoB,EAAAhB,EAAAiB,cAACyF,EAAA,EAAD,CAASC,SAAO,GACd3F,EAAAhB,EAAAiB,cAACmF,EAAA,EAAKQ,MAAN,CACEC,KAAK,WACLC,OAAK,EAACC,KAAK,OACXC,aAAa,OACbC,YAAY,aAEbjG,EAAAhB,EAAAiB,cAACmF,EAAA,EAAKQ,MAAN,CACEC,KAAK,OACLC,OAAK,EAACC,KAAK,eACXC,aAAa,OACbC,YAAY,iBAEdjG,EAAAhB,EAAAiB,cAACmF,EAAA,EAAKQ,MAAN,CACCC,KAAK,SACLC,OAAK,EACLC,KAAK,QACLC,aAAa,OACbC,YAAY,eAEZjG,EAAAhB,EAAAiB,cAACmF,EAAA,EAAKQ,MAAN,CACCC,KAAK,WACLC,OAAK,EACLC,KAAK,OACLC,aAAa,OACbC,YAAY,WACZlF,KAAK,aAERf,EAAAhB,EAAAiB,cAACiG,EAAA,EAAD,CACE9B,MAAO,CAAC+B,gBAAiB,UAAWC,MAAO,WAC3CN,OAAK,EACLZ,KAAK,QACLnE,KAAK,UAJP,aAQJf,EAAAhB,EAAAiB,cAACoG,EAAA,EAAD,CAASjC,MAAO,CAACkC,UAAW,WAA5B,qBACsBtG,EAAAhB,EAAAiB,cAACsG,EAAA,EAAD,CAAMnC,MAAO,CAACgC,MAAO,WAAY5B,GAAG,UAApC,qBA3DblE,sBCeNmH,mLAdX,OACEzH,EAAAhB,EAAAiB,cAACyH,EAAA,EAAKC,KAAN,CAAWvD,MAAO,CAACwD,aAAc,QAC/B5H,EAAAhB,EAAAiB,cAACgF,EAAA,EAAD,CAAO4C,QAAM,EAAC1H,IAAKhC,KAAKJ,MAAM0D,QAAQoG,SACtC7H,EAAAhB,EAAAiB,cAACyH,EAAA,EAAKI,QAAN,KACE9H,EAAAhB,EAAAiB,cAACyH,EAAA,EAAKK,OAAN,KAAc5J,KAAKJ,MAAM0D,QAAQuG,WACjChI,EAAAhB,EAAAiB,cAACyH,EAAA,EAAKO,YAAN,KACG9J,KAAKJ,MAAM0D,QAAQyG,kBATV5H,aCChBsF,8MAEJrH,MAAQ,CACN4J,KAAM,MAGRC,SAAW,SAAC9C,GACVtH,EAAKyB,SAAS,CAAC0I,KAAM7C,EAAEC,OAAO3G,WAGhCyG,SAAW,SAACC,GACVA,EAAE+C,0FAGK,IAAAlJ,EAAAhB,KACP,OACI6B,EAAAhB,EAAAiB,cAACmF,EAAA,EAAD,CACEC,SAAUlH,KAAKkH,SACfjB,MAAO,CAAC+B,gBAAiB,YAEzBnG,EAAAhB,EAAAiB,cAACmF,EAAA,EAAKQ,MAAN,CACEK,YAAY,kBACZ7B,MAAO,CAAE+B,gBAAiB,WAC1BiC,SAAUjK,KAAKiK,SACfE,UAAW,SAAChD,GACQ,KAAdA,EAAEiD,UACJpJ,EAAKpB,MAAMuK,UAAUhD,EAAEC,OAAO3G,OAC9BO,EAAKM,SAAS,CAAC0I,KAAK,OAI1BvJ,MAAOT,KAAKI,MAAM4J,eA/BR7H,aA6CLkG,eAAQ,KAPI,SAAAzD,GACzB,MAAO,CACLuF,UAAW,SAAC7G,GAAasB,EJ0DN,SAACtB,GACtB,OAAO,SAACsB,GACNJ,OAAOQ,IAAIhC,cAAc,GAAGqH,KAAK,CAACN,QAASzG,EAASkC,gBAAiBrB,EAAMsB,WAAWpC,qBAAqBtB,KAC3G6C,EALgB,SAACtB,GAAD,MAAc,CAACV,KAAM,eAAgBJ,aAAcc,GAK1DgH,CAAYhH,KI7DaiH,CAAejH,OAKtC+E,CAAkCZ,yBC3C3C+C,oLAEF,OACExK,KAAKJ,MAAMyD,qBACXxB,EAAAhB,EAAAiB,cAACyE,EAAA,EAAKM,OAAN,CAAa4D,MAAO,GAClB5I,EAAAhB,EAAAiB,cAACyF,EAAA,EAAD,CACEtB,MAAO,CACLyE,OAAQ,OACRC,UAAW,WAEb9I,EAAAhB,EAAAiB,cAACyH,EAAA,EAAD,KACGvJ,KAAKJ,MAAMyD,qBAAqBG,SAASoH,IAAI,SAAAC,GAAC,OAC7ChJ,EAAAhB,EAAAiB,cAACgJ,EAAD,CAAStK,IAAKqK,EAAE9I,GAAIuB,QAASuH,QAInChJ,EAAAhB,EAAAiB,cAACyF,EAAA,EAAD,KACE1F,EAAAhB,EAAAiB,cAACiJ,GAAD,QAIJlJ,EAAAhB,EAAAiB,cAACyE,EAAA,EAAKM,OAAN,CAAa4D,MAAO,GAClB5I,EAAAhB,EAAAiB,cAACyF,EAAA,EAAD,CAAStB,MAAQ,CAACyE,OAAQ,SACxB7I,EAAAhB,EAAAiB,cAACgF,EAAA,EAAD,CAAO9E,IAAKgJ,KAASrD,OAAK,aAvBJxF,aAqCjBkG,eAPS,SAAAjI,GACtB,MAAO,CACLiD,qBAAsBjD,EAAMiD,qBAC5B8C,YAAa/F,EAAMyC,WAIRwF,CAAyBmC,ICvClCS,oLACK,IAAApL,EAAAG,KACP,OACE6B,EAAAhB,EAAAiB,cAACyF,EAAA,EAAD,CACE2D,QAAS,kBAAMrL,EAAKD,MAAMsL,QAAQrL,EAAKD,MAAMuD,aAAapB,MAEvD/B,KAAKJ,MAAMuD,aAAagI,cANRhJ,aAkBZkG,eAAQ,KANI,SAAAzD,GACzB,MAAO,CACLsG,QAAS,SAACnJ,GAAQ6C,ENqEO,SAAC7C,GAC5B,OAAO,SAAC6C,GACN2D,MAAK,GAAAzE,OAAIY,EAAJ,mBAAAZ,OAA6B/B,IAC/B8G,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAhD,GACJjB,EAP+C,CAAChC,KAAM,uBAAwBS,qBAOjDwC,OM1ENuF,CAAqBrJ,OAIrCsG,CAAkC4C,ICjB3CI,+LAGFrL,KAAKJ,MAAM+E,gDAIX,OACE9C,EAAAhB,EAAAiB,cAACyE,EAAA,EAAKM,OAAN,CAAa4D,MAAO,GACnBzK,KAAKJ,MAAMoD,cACVhD,KAAKJ,MAAMoD,cAAc4H,IAAI,SAAAU,GAAC,OAC1BzJ,EAAAhB,EAAAiB,cAACyJ,GAAD,CACE/K,IAAK8K,EAAEvJ,GACPoB,aAAcmI,MACT,aAdiBnJ,aAiCrBkG,eAZS,SAAAjI,GACtB,MAAO,CACL4C,cAAe5C,EAAMyC,SAASG,gBAIP,SAAA4B,GACzB,MAAO,CACLD,aAAc,WAAOC,EAASD,QAInB0D,CAA6CgD,kCClCtDG,8MAEJpL,MAAQ,CACNuD,IAAK9D,EAAKD,MAAM+D,IAChB8H,MAAM,KAGRC,cAAgB,WACd,IAAIC,EAAU,CACZC,OAAQ/L,EAAKO,MAAMuD,IAAI5B,GACvByD,gBAAiB3F,EAAKD,MAAMyD,qBAAqBtB,IAEnDlC,EAAKD,MAAMiM,UAAUF,GACrB9L,EAAKyB,SAAS,CAACmK,MAAM,6EAGd,IAAAzK,EAAAhB,KACP,OACE6B,EAAAhB,EAAAiB,cAACgK,GAAA,EAAD,CACE/E,KAAK,QACL0E,KAAMzL,KAAKI,MAAMqL,KACjBM,QACElK,EAAAhB,EAAAiB,cAACkK,GAAA,EAASxC,KAAV,CACE0B,QAAS,kBAAMlK,EAAKM,SAAS,CAACmK,MAAM,MACnCzL,KAAKJ,MAAM+D,IAAI+D,OAGlB7F,EAAAhB,EAAAiB,cAACgK,GAAA,EAAMlC,OAAP,KAAe5J,KAAKJ,MAAM+D,IAAI+D,MAC9B7F,EAAAhB,EAAAiB,cAACgK,GAAA,EAAMnC,QAAP,CAAesC,OAAK,GAClBpK,EAAAhB,EAAAiB,cAACgF,EAAA,EAAD,CACEoF,SAAO,EACPnF,KAAK,SACL/E,IAAKhC,KAAKJ,MAAM+D,IAAI+F,SAEtB7H,EAAAhB,EAAAiB,cAACgK,GAAA,EAAMhC,YAAP,KACEjI,EAAAhB,EAAAiB,cAAC8H,GAAA,EAAD,iBACA/H,EAAAhB,EAAAiB,cAAA,aAAK9B,KAAKJ,MAAM+D,IAAIoI,SACpBlK,EAAAhB,EAAAiB,cAAC8H,GAAA,EAAD,kBACA/H,EAAAhB,EAAAiB,cAAA,SAAI9B,KAAKJ,MAAM+D,IAAIwI,YAGvBtK,EAAAhB,EAAAiB,cAACgK,GAAA,EAAMM,QAAP,KACEvK,EAAAhB,EAAAiB,cAACiG,EAAA,EAAD,CACE9B,MAAO,CAAC+B,gBAAiB,UAAWC,MAAO,WAC3CiD,QAAS,kBAAMlK,EAAKM,SAAS,CAACmK,MAAM,KACpC1E,KAAK,SAHP,YAKAlF,EAAAhB,EAAAiB,cAACiG,EAAA,EAAD,CACE9B,MAAO,CAAC+B,gBAAiB,UAAWC,MAAO,WAC3CiD,QAAS,kBAAMlK,EAAK0K,iBACpB3E,KAAK,SAHP,kBA/CU5E,aAsEPkG,eAZS,SAAAjI,GACtB,MAAO,CACLiD,qBAAsBjD,EAAMiD,uBAIL,SAAAuB,GACzB,MAAO,CACLiH,UAAW,SAACF,GAAa/G,ERiIX,SAAC+G,GACjB,OAAM,SAAC/G,GACL,IAAMC,EAAQzC,EAAQ0C,IAAI,SAC1ByD,MAAK,GAAAzE,OAAIY,EAAJ,sBAAiC,CACpC8D,OAAQ,OACRC,QAAS,CACPC,eAAgB,mBAChB2D,OAAU,mBACVC,cAAA,UAAAxI,OAA2Be,IAE7BmB,KAAM2C,KAAKC,UAAU+C,KACpB9C,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAhD,GACJ0C,MAAK,GAAAzE,OAAIY,EAAJ,UAAAZ,OAAoB+B,EAAK0G,gBAAgBX,QAAU,CACtDpD,OAAQ,MACRC,QAAS,CACPC,eAAgB,mBAChB2D,OAAU,mBACVC,cAAA,UAAAxI,OAA2Be,MAE5BgE,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAhD,GAASjB,EAvBE,CAAChC,KAAM,4BAA6Be,IAuBpBkC,SQtJLgG,CAAUF,OAIjCtD,CAA6CmD,ICtEtDgB,wLAEQ,IAAA3M,EAAAG,KACV,OAAIA,KAAKJ,MAAMyD,qBAENrD,KAAKJ,MAAMiE,QAAQ4I,OAAO,SAAA9I,GAAG,QAAM9D,EAAKD,MAAMyD,qBAAqBK,KAAKgJ,SAAS/I,KAEjF3D,KAAKJ,MAAMiE,yCAKpB,OACE7D,KAAKJ,MAAMyD,qBACXxB,EAAAhB,EAAAiB,cAACyE,EAAA,EAAKM,OAAN,CAAa4D,MAAO,GAClB5I,EAAAhB,EAAAiB,cAACyF,EAAA,EAAD,KACE1F,EAAAhB,EAAAiB,cAACyH,EAAA,EAAD,CAAMxC,KAAK,QAAQH,cAAc,UAC/B/E,EAAAhB,EAAAiB,cAAC8H,GAAA,EAAD,CAAQ3D,MAAO,CAACgC,MAAO,YAAajI,KAAKJ,MAAMyD,qBAAqB8H,OACpEtJ,EAAAhB,EAAAiB,cAAC8H,GAAA,EAAD,sBACC5J,KAAKJ,MAAMyD,qBAAqBsJ,MAAM/B,IAAI,SAAAtC,GACzC,OACEzG,EAAAhB,EAAAiB,cAACyH,EAAA,EAAKC,KAAN,CAAWhJ,IAAK8H,EAAKvG,IACnBF,EAAAhB,EAAAiB,cAACgF,EAAA,EAAD,CAAO4C,QAAM,EAAC1H,IAAKsG,EAAKoB,SACxB7H,EAAAhB,EAAAiB,cAACyH,EAAA,EAAKI,QAAN,KACE9H,EAAAhB,EAAAiB,cAACyH,EAAA,EAAKK,OAAN,KAActB,EAAKZ,UAK3B7F,EAAAhB,EAAAiB,cAAC8H,GAAA,EAAD,cACC5J,KAAKJ,MAAMyD,qBAAqBK,KAAKkH,IAAI,SAAAjH,GACxC,OACA9B,EAAAhB,EAAAiB,cAACyH,EAAA,EAAKC,KAAN,CAAWhJ,IAAKmD,EAAI5B,IAClBF,EAAAhB,EAAAiB,cAACgF,EAAA,EAAD,CAAO4C,QAAM,EAAC1H,IAAK2B,EAAI+F,SACvB7H,EAAAhB,EAAAiB,cAACyH,EAAA,EAAKI,QAAN,KACE9H,EAAAhB,EAAAiB,cAACyH,EAAA,EAAKK,OAAN,KAAcjG,EAAI+D,WAKxB7F,EAAAhB,EAAAiB,cAACyF,EAAA,EAAD,CAASqF,UAAQ,EAAC3G,MAAO,CAAC+B,gBAAiB,YAC3CnG,EAAAhB,EAAAiB,cAACkK,GAAA,EAAD,CACEhC,KAAK,UACL1D,UAAU,aAEVzE,EAAAhB,EAAAiB,cAACkK,GAAA,EAASa,KAAV,KACG7M,KAAKJ,MAAMiE,QAAQ+G,IAAI,SAAAjH,GACpB,OAAQ9B,EAAAhB,EAAAiB,cAACgL,GAAD,CAAStM,IAAKmD,EAAI5B,GAAI4B,IAAKA,WAMhC,YArDQxB,aAkEhBkG,eAPS,SAAAjI,GACtB,MAAO,CACLiD,qBAAsBjD,EAAMiD,qBAC5BQ,QAASzD,EAAMyD,UAIJwE,CAAyBmE,IC7DlCO,+LAGF/M,KAAKJ,MAAMoN,mDAIb,OACEhN,KAAKJ,MAAMuG,YACTtE,EAAAhB,EAAAiB,cAACyE,EAAA,EAAD,CAAMC,QAAS,EAAGyG,QAAM,GACtBpL,EAAAhB,EAAAiB,cAACyE,EAAA,EAAKI,IAAN,KACE9E,EAAAhB,EAAAiB,cAACoL,GAAD,MACArL,EAAAhB,EAAAiB,cAACqL,GAAD,MACAtL,EAAAhB,EAAAiB,cAACsL,GAAD,QAGAvL,EAAAhB,EAAAiB,cAACsE,EAAA,EAAD,CAAUC,GAAG,kBAhBAlE,aAiCRkG,eAZS,SAAAjI,GACtB,MAAO,CACL+F,YAAa/F,EAAMyC,WAII,SAAA+B,GACzB,MAAO,CACLoI,gBAAiB,WAAOpI,EVkJpB,SAACA,GACL,IAAMC,EAAQzC,EAAQ0C,IAAI,SAC1ByD,MAAK,GAAAzE,OAAIY,EAAJ,SAAoB,CACvB8D,OAAQ,MACRC,QAAS,CACPC,eAAe,mBACf4D,cAAA,UAAAxI,OAA0Be,MAC3BgE,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAhD,GAASjB,EAXa,CAAChC,KAAM,mBAAoBc,KAWhBmC,WUtJ9BwC,CAA6C0E,ICtB7CM,oLAjBX,OACAxL,EAAAhB,EAAAiB,cAAA,OAAKwE,UAAU,YAAYL,MAAO,CAACyE,OAAQ,QAAS1C,gBAAiB,YACnEnG,EAAAhB,EAAAiB,cAAA,OAAKwE,UAAU,iBAAiBL,MAAO,CAACyE,OAAQ,OAAQzC,MAAO,UAAWE,UAAW,SAAUvB,cAAe,SAAUF,WAAY,QAClI7E,EAAAhB,EAAAiB,cAAA,KAAGmE,MAAO,CAACqH,SAAU,SAArB,4BALenL,iCCGjBoL,8MAEJnN,MAAQ,CACN+K,MAAO,GACPqC,OAAQ,QAOVC,YAAc,SAACtG,GACbtH,EAAKyB,SAAS,CAAC6J,MAAOhE,EAAEC,OAAO3G,WAGjCiN,eAAiB,SAACvG,GAChBtH,EAAKyB,SAAS,CAACkM,OAAQrG,EAAEC,OAAOrF,QAGlC4L,WAAa,WACX,IAAI9H,EAAO,CACTsF,MAAOtL,EAAKO,MAAM+K,MAClBqC,OAAQ3N,EAAKO,MAAMoN,QAErBhM,QAAQC,IAAIoE,GACZhG,EAAKD,MAAMgO,wBAAwB/H,GACnChG,EAAKD,MAAMiO,gHAlBX7N,KAAKJ,MAAMkO,oDAqBJ,IAAA9M,EAAAhB,KACH+N,EAAgB/N,KAAKJ,MAAMgE,SAAS6I,OAAO,SAAAnE,GAAI,OAAIA,EAAKvG,KAAOf,EAAKpB,MAAMuG,YAAYpE,KAC1FP,QAAQC,IAAIsM,GACZ,IAAInK,EAAWmK,EAAcnD,IAAI,SAAAtC,GAC/B,MAAO,CACLvG,GAAIuG,EAAKvG,GACTiI,KAAM1B,EAAKZ,KACXjH,MAAO6H,EAAKvG,GACZkK,MAAO,CAACvC,QAAQ,EAAM1H,IAAKsG,EAAKoB,WAIpC,OACI7H,EAAAhB,EAAAiB,cAACgK,GAAA,EAAMnC,QAAP,KACE9H,EAAAhB,EAAAiB,cAAC8H,GAAA,EAAD,eACA/H,EAAAhB,EAAAiB,cAACmF,EAAA,EAAD,CAAMlF,GAAG,sBAAsBmF,SAAUlH,KAAK2N,YAC5C9L,EAAAhB,EAAAiB,cAACmF,EAAA,EAAKQ,MAAN,CACEwC,SAAUjK,KAAKyN,YACf3F,YAAY,UAEdjG,EAAAhB,EAAAiB,cAAC8H,GAAA,EAAD,YACA/H,EAAAhB,EAAAiB,cAACmF,EAAA,EAAKQ,MAAN,CACEuG,QAASC,KACTnG,YAAY,kBACZH,OAAK,EACLuG,WAAS,EACTC,QAASvK,EACTqG,SAAUjK,KAAK0N,iBAEjB7L,EAAAhB,EAAAiB,cAACiG,EAAA,EAAD,CACEJ,OAAK,EACLZ,KAAK,QACLgD,QAAQ,SACR9D,MAAO,CAAC+B,gBAAiB,UAAWC,MAAO,sBA9D3B9F,aAuFfkG,eAhBS,SAAAjI,GACtB,MAAO,CACLwD,SAAUxD,EAAMwD,SAChBuC,YAAa/F,EAAMyC,WAII,SAAA+B,GACzB,MAAO,CACLkJ,iBAAkB,WAAOlJ,EZ6BpB,SAACA,GACN,IAAMC,EAAQzC,EAAQ0C,IAAI,SACpBC,EAAG,GAAAjB,OAAMY,EAAN,UACT6D,MAAMxD,EAAK,CACTyD,OAAQ,MACRC,QAAS,CACPC,eAAe,mBACf4D,cAAA,UAAAxI,OAA0Be,MAG3BgE,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAhD,GACJrE,QAAQC,IAAIoE,GACZjB,EAhB+B,CAAChC,KAAM,oBAAqBgB,SAgBlCiC,SYzC7B+H,wBAAyB,SAAC/H,GZqDE,IAAC8F,EYrDO/G,GZqDP+G,EYrDwC9F,EZsDhE,SAACjB,GACN,IAAMC,EAAQzC,EAAQ0C,IAAI,SAC1ByD,MAAK,GAAAzE,OAAIY,EAAJ,kBAA6B,CAChC8D,OAAQ,OACRC,QAAS,CACPC,eAAgB,mBAChB2D,OAAU,mBACVC,cAAA,UAAAxI,OAA0Be,IAE5BmB,KAAM2C,KAAKC,UAAU,CAACuC,MAAOQ,EAAQR,UAEpCtC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAuF,GACJ7F,MAAK,GAAAzE,OAAIY,EAAJ,uBAAkC,CACrC8D,OAAQ,OACRC,QAAS,CACPC,eAAgB,mBAChB2D,OAAU,mBACVC,cAAA,UAAAxI,OAA0Be,IAE5BmB,KAAM2C,KAAKC,UAAU,CAACpD,gBAAiB4I,EAAiBjL,aAAapB,GAAIsM,QAASC,SAAS3C,EAAQ6B,YAClG3E,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAA0F,GACJhG,MAAK,GAAAzE,OAAIY,EAAJ,uBAAkC,CACrC8D,OAAQ,OACRC,QAAS,CACPC,eAAgB,mBAChB2D,OAAU,mBACVC,cAAA,UAAAxI,OAA0Be,IAE5BmB,KAAM2C,KAAKC,UAAU,CAACpD,gBAAiB+I,EAAQC,iBAAiBhJ,gBAAiB6I,QAASlK,EAAMsB,WAAW5C,SAASd,OACnH8G,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAhD,GACJrE,QAAQC,IAAI2M,GACZxJ,EArCkC,CAAChC,KAAM,mBAAoBO,aAqC7BiL,EAAiBjL,yBYvF7D0K,0BAA2B,WAAOjJ,EZgDG,CAAChC,KAAM,8BY3CjCyF,CAA6CkF,ICvFtDkB,8MACJrO,MAAQ,CACNsH,KAAM,GACNqE,QAAS,GACTI,SAAU,GACVzC,OAAQ,MAGVgF,WAAa,SAACvH,GACZtH,EAAKyB,SAAS,CAACoG,KAAMP,EAAEC,OAAO3G,WAGhCkO,cAAgB,SAACxH,GACftH,EAAKyB,SAAS,CAACyK,QAAS5E,EAAEC,OAAO3G,WAGnCmO,eAAiB,SAACzH,GAChBtH,EAAKyB,SAAS,CAAC6K,SAAUhF,EAAEC,OAAO3G,WAGpCoO,aAAe,SAAC1H,GACdtH,EAAKyB,SAAS,CAACoI,OAAQvC,EAAEC,OAAO3G,WAGlCkN,WAAa,WACX,IAAIhC,EAAU9L,EAAKO,MACnBP,EAAKD,MAAMkP,eAAenD,GAC1B9L,EAAKD,MAAMmP,4FAIX,OACElN,EAAAhB,EAAAiB,cAACgK,GAAA,EAAMnC,QAAP,KACE9H,EAAAhB,EAAAiB,cAAC8H,GAAA,EAAD,kBACA/H,EAAAhB,EAAAiB,cAACmF,EAAA,EAAD,CAAMC,SAAUlH,KAAK2N,YACnB9L,EAAAhB,EAAAiB,cAACmF,EAAA,EAAKQ,MAAN,CACEK,YAAY,WACZmC,SAAUjK,KAAK0O,aAEjB7M,EAAAhB,EAAAiB,cAAC8H,GAAA,EAAD,iBACA/H,EAAAhB,EAAAiB,cAAA,6CACAD,EAAAhB,EAAAiB,cAACmF,EAAA,EAAKQ,MAAN,CACEK,YAAY,UACZmC,SAAUjK,KAAK2O,gBAEjB9M,EAAAhB,EAAAiB,cAAC8H,GAAA,EAAD,kBACA/H,EAAAhB,EAAAiB,cAAA,kDACAD,EAAAhB,EAAAiB,cAACmF,EAAA,EAAKQ,MAAN,CACEK,YAAY,WACZmC,SAAUjK,KAAK4O,iBAEjB/M,EAAAhB,EAAAiB,cAAC8H,GAAA,EAAD,gBACA/H,EAAAhB,EAAAiB,cAACmF,EAAA,EAAKQ,MAAN,CACEK,YAAY,MACZmC,SAAUjK,KAAK6O,eAEjBhN,EAAAhB,EAAAiB,cAACiG,EAAA,EAAD,CACEJ,OAAK,EACLZ,KAAK,QACLgD,QAAQ,SACR9D,MAAO,CAAC+B,gBAAiB,UAAWC,MAAO,sBA5DjC9F,aA6EPkG,eAAQ,KAPI,SAAAzD,GACzB,MAAO,CACLmK,iBAAkB,WAAOnK,EbyJG,CAAChC,KAAM,mBaxJnCkM,eAAgB,SAACnD,GAAa/G,Eb4JX,SAAC+G,GACtB,OAAM,SAAC/G,GACL,IAAMC,EAAQzC,EAAQ0C,IAAI,SAC1ByD,MAAK,GAAAzE,OAAIY,EAAJ,SAAoB,CACvB8D,OAAQ,OACRC,QAAS,CACPC,eAAgB,mBAChB2D,OAAU,mBACVC,cAAA,UAAAxI,OAA0Be,IAE5BmB,KAAM2C,KAAKC,UAAU+C,KACpB9C,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAhD,GAAI,OAAIjB,EAdY,CAAChC,KAAM,kBAAmBe,IAcfkC,EAAKlC,SaxKLmL,CAAenD,OAI3CtD,CAAkCoG,IC5E3CO,oLA0CF,OACEnN,EAAAhB,EAAAiB,cAACgK,GAAA,EAAMnC,QAAP,CAAesC,OAAK,GAClBpK,EAAAhB,EAAAiB,cAACgF,EAAA,EAAD,CACEoF,SAAO,EACPnF,KAAK,SACL/E,IAAKhC,KAAKJ,MAAMiD,SAAS6G,SAE3B7H,EAAAhB,EAAAiB,cAACgK,GAAA,EAAMhC,YAAP,KACEjI,EAAAhB,EAAAiB,cAAC8H,GAAA,EAAD,sBACA/H,EAAAhB,EAAAiB,cAAA,SAAI9B,KAAKJ,MAAMiD,SAAS6E,MACxB7F,EAAAhB,EAAAiB,cAAC8H,GAAA,EAAD,kBACA/H,EAAAhB,EAAAiB,cAAA,SAAI9B,KAAKJ,MAAMiD,SAASwE,mBArDZlF,aAyEPkG,eAZS,SAAAjI,GACtB,MAAO,CACLyC,SAAUzC,EAAMyC,WAIO,SAAA+B,GACzB,MAAO,CACLqK,kBAAmB,WAAOrK,EdkLG,CAAChC,KAAM,2Bc9KzByF,CAA6C2G,ICrEtDE,oLAIF,OACErN,EAAAhB,EAAAiB,cAAC+K,GAAA,EAAD,CAAM5G,MAAO,CAAC+B,gBAAiB,UAAWC,MAAO,WAAY2E,UAAQ,GACnE/K,EAAAhB,EAAAiB,cAAC+K,GAAA,EAAKrD,KAAN,CAAW0B,QAASlL,KAAKJ,MAAMuP,UAC7BtN,EAAAhB,EAAAiB,cAAA,OAAKE,IAAKC,IAAMC,IAAI,UAEtBL,EAAAhB,EAAAiB,cAACgK,GAAA,EAAD,CACE/E,KAAK,QACLgF,QAASlK,EAAAhB,EAAAiB,cAAC+K,GAAA,EAAKrD,KAAN,CACG9B,KAAK,sBACLwD,QAASlL,KAAKJ,MAAMwP,2BAEhC3D,KAAMzL,KAAKJ,MAAMoE,kBACjBqL,QAASrP,KAAKJ,MAAMiO,2BAEpBhM,EAAAhB,EAAAiB,cAACgK,GAAA,EAAMlC,OAAP,oCACA/H,EAAAhB,EAAAiB,cAACwN,GAAD,OAEFzN,EAAAhB,EAAAiB,cAACgK,GAAA,EAAD,CACE/E,KAAK,QACLgF,QAASlK,EAAAhB,EAAAiB,cAAC+K,GAAA,EAAKrD,KAAN,CACG9B,KAAK,aACLwD,QAASlL,KAAKJ,MAAM2P,kBAChC9D,KAAMzL,KAAKJ,MAAMqE,YACjBoL,QAASrP,KAAKJ,MAAMmP,kBAEpBlN,EAAAhB,EAAAiB,cAACgK,GAAA,EAAMlC,OAAP,2BACA/H,EAAAhB,EAAAiB,cAAC0N,GAAD,OAEF3N,EAAAhB,EAAAiB,cAAC+K,GAAA,EAAKA,KAAN,CAAW4C,SAAS,SACpB5N,EAAAhB,EAAAiB,cAACgK,GAAA,EAAD,CACE/E,KAAK,QACLgF,QAASlK,EAAAhB,EAAAiB,cAAC+K,GAAA,EAAKrD,KAAN,CACG9B,KAAK,UACLwD,QAASlL,KAAKJ,MAAM8P,mBAEhCjE,KAAMzL,KAAKJ,MAAMsE,aACjBmL,QAASrP,KAAKJ,MAAMqP,mBAEtBpN,EAAAhB,EAAAiB,cAACgK,GAAA,EAAMlC,OAAP,kBACA/H,EAAAhB,EAAAiB,cAAC6N,GAAD,OAEE9N,EAAAhB,EAAAiB,cAAC+K,GAAA,EAAKrD,KAAN,CACE9B,KAAK,SACLwD,QAASlL,KAAKJ,MAAMgQ,kBA/CXzN,aA+ENkG,eAvBS,SAAAjI,GACtB,MAAO,CACL4D,kBAAmB5D,EAAM4D,kBACzBC,YAAa7D,EAAM6D,YACnBC,aAAc9D,EAAM8D,aACpBL,QAASzD,EAAMyD,QACfhB,SAAUzC,EAAMyC,WAIO,SAAA+B,GACzB,MAAO,CACLgL,OAAQ,WAAOhL,EfhDG,CAAChC,KAAM,gBeiDzBwM,yBAA2B,WAAOxK,EfsDE,CAAChC,KAAM,2BerD3CiL,0BAA2B,WAAOjJ,EfuDG,CAAChC,KAAM,4BetD5C2M,gBAAiB,WAAO3K,EfmJG,CAAChC,KAAM,kBelJlCmM,iBAAkB,WAAOnK,EfoJG,CAAChC,KAAM,mBenJnC8M,iBAAkB,WAAO9K,EfwKG,CAAChC,KAAM,wBevKnCqM,kBAAmB,WAAOrK,EfyKG,CAAChC,KAAM,yBexKpCuM,SAAU,WAAOvK,EfaG,CAAChC,KAAM,gBeThByF,CAA6C6G,cC7EtD9M,WAAUC,EAAQ,KAGlB2C,+LAGE5C,GAAQ0C,IAAI,UACd9E,KAAKJ,MAAMiQ,gDAKb,OACEhO,EAAAhB,EAAAiB,cAACgO,EAAA,SAAD,KACC9P,KAAKJ,MAAMuG,YACVtE,EAAAhB,EAAAiB,cAACiO,GAAA,EAAD,KACElO,EAAAhB,EAAAiB,cAACkO,GAAD,OAEA,KACFnO,EAAAhB,EAAAiB,cAACmO,EAAA,EAAD,CAAeC,SAAUC,YACvBtO,EAAAhB,EAAAiB,cAACsO,EAAA,EAAD,KACEvO,EAAAhB,EAAAiB,cAACuO,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM3O,EAAAhB,EAAAiB,cAACsE,EAAA,EAAD,CAAUC,GAAG,cACjDxE,EAAAhB,EAAAiB,cAACuO,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,OAAQ,kBAAM3O,EAAAhB,EAAAiB,cAAC2O,EAAD,SACzC5O,EAAAhB,EAAAiB,cAACuO,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,UAAUG,UAAWrH,IACvCxH,EAAAhB,EAAAiB,cAACuO,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,iBAAiBC,OAAQ,kBAAM3O,EAAAhB,EAAAiB,cAAC6O,GAAD,SACjD9O,EAAAhB,EAAAiB,cAACuO,EAAA,EAAD,CAAOK,UAAWrD,eAtBZlL,aA2CHyO,KAAWC,YAAWxI,YAbb,SAAAjI,GACtB,MAAO,CACL+F,YAAa/F,EAAMyC,WAII,SAAA+B,GACzB,MAAO,CACLD,aAAc,WAAOC,EAASD,MAC9BkL,aAAc,SAAChL,GAAWD,EhBjBrB,SAACA,GACN,IAAMC,EAAQzC,EAAQ0C,IAAI,SACpBC,EAAG,GAAAjB,OAAOY,EAAP,YACT6D,MAAMxD,EAAK,CACTyD,OAAQ,MACRC,QAAS,CACPC,eAAe,mBACf4D,cAAA,UAAAxI,OAA0Be,MAG3BgE,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAhD,GACJjB,EAf2B,CAAChC,KAAM,eAAgBC,SAe7BgD,EAAKyC,cgBSGD,CAA6CrD,MC9C9D8L,QACW,cAA7BtM,OAAOuM,SAASC,UAEe,UAA7BxM,OAAOuM,SAASC,UAEhBxM,OAAOuM,SAASC,SAASC,MACvB,2DCTNC,IAASV,OACP3O,EAAAhB,EAAAiB,cAACqP,EAAA,EAAD,CAAUhN,MAAOA,GACftC,EAAAhB,EAAAiB,cAACmO,EAAA,EAAD,KACEpO,EAAAhB,EAAAiB,cAACsP,GAAD,QAGJrL,SAASsL,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3I,KAAK,SAAA4I,GACjCA,EAAaC,mCEnInBtS,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.08cd1860.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/login-logo.a9784e18.png\";","module.exports = __webpack_public_path__ + \"static/media/signup-logo.6977c84d.png\";","module.exports = __webpack_public_path__ + \"static/media/welcome.7d9b1d66.gif\";","import React, {Component} from 'react'\nimport logo from './logo-pink.png'\n\nfunction LoadingMessage() {\n  return (\n    <div id='loading-background'>\n      <img id='loading-logo' src={logo} alt='GapGap logo'/>\n    </div>\n  )\n}\n\nfunction withLoadingSpinner(WrappedComponent) {\n  return class extends Component {\n    constructor(props) {\n      super(props)\n      this.state = {\n        loading: true\n      }\n    }\n\n    async componentDidMount() {\n      try {\n        setTimeout(() => {\n         this.setState({\n           loading: false,\n         });\n       }, 2000)\n     } catch(err) {\n       console.log(err)\n       this.setState({ loading: false })\n     }\n    }\n\n    render() {\n      if (this.state.loading) return LoadingMessage()\n      return <WrappedComponent {...this.props}/>\n    }\n\n  }\n}\n\nexport default withLoadingSpinner\n","import { combineReducers } from 'redux'\nconst Cookies = require('cookies-js')\n\n\nconst messageReducer = (state = '', action) => {\n  switch (action.type) {\n    case 'SEND_MESSAGE':\n    console.log('sent', action.messageInput);\n      return action.messageInput\n    default:\n      return state\n  }\n}\n\nconst userReducer = (state = null, action) => {\n  switch (action.type) {\n    case 'LOGGED_IN':\n      return action.userData\n    case 'LOGGED_OUT':\n      Cookies.expire('token')\n      return null\n    case 'CHECKED_USER':\n      return action.userData\n    case 'NEW_CONVERSATION':\n      console.log(action)\n      let newConversations = state.conversations.slice()\n      newConversations.push(action.conversation)\n      return {...state, conversations: newConversations}\n    default:\n      return state\n  }\n}\n\nconst selectedConversationReducer = (state = null, action) => {\n  switch (action.type) {\n    case 'FETCHED_CONVERSATION':\n      return action.selectedConversation\n    case 'RECEIVE_MESSAGE':\n    console.log('received', action.message);\n      let newMessages = state.messages.slice()\n      newMessages.push(action.message)\n      return {...state, messages: newMessages}\n    case 'ADDED_BOT_TO_CONVERSATION':\n      let newBots = state.bots.slice()\n      newBots.push(action.bot)\n      return {...state, bots: newBots}\n    case 'HOMEPAGE':\n      return null\n    default:\n      return state\n  }\n}\n\nconst allUsersReducer = (state = [], action) => {\n  switch (action.type) {\n    case 'FETCHED_ALL_USERS':\n      return action.allUsers\n    default:\n      return state\n  }\n}\n\nconst conversationModalReducer = (state = false, action) => {\n  switch (action.type) {\n    case 'OPEN_NEW_CONVERSATION':\n      return true\n    case 'CLOSE_NEW_CONVERSATION':\n      return false\n    default:\n      return state\n  }\n}\n\nconst botModalReducer = (state = false, action) => {\n  switch (action.type) {\n    case 'OPEN_NEW_BOT':\n      return true\n    case 'CLOSE_NEW_BOT':\n      return false\n    default:\n      return state\n  }\n}\n\n\nconst profileModalReducer = (state = false, action) => {\n  switch (action.type) {\n    case 'OPEN_PROFILE_MODAL':\n      return true\n    case 'CLOSE_PROFILE_MODAL':\n      return false\n    default:\n      return state\n  }\n}\n\nconst allBotsReducer = (state = [], action) => {\n  switch (action.type) {\n    case 'FETCHED_ALL_BOTS':\n      return action.bots\n    case 'CREATED_NEW_BOT':\n      return [...state, action.bot]\n    default:\n      return state\n  }\n}\n\n\nconst rootReducer = combineReducers({\n  messageInput: messageReducer,\n  userData: userReducer,\n  selectedConversation: selectedConversationReducer,\n  allUsers: allUsersReducer,\n  allBots: allBotsReducer,\n  conversationModal: conversationModalReducer,\n  newBotModal: botModalReducer,\n  profileModal: profileModalReducer\n})\n\nexport default rootReducer\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport rootReducer from './reducer'\nimport thunk from 'redux-thunk'\n\nconst store = createStore(rootReducer, compose(\n  applyMiddleware(thunk),\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n))\n\nexport default store\n","import ActionCable from 'actioncable'\nimport store from './store.js'\nconst Cookies = require('cookies-js')\nconst API_URL = 'https://gap-gap.herokuapp.com'\n// login\nconst loggedIn = (userData) => ({type: 'LOGGED_IN', userData})\n\nconst loggingIn = (username, password) => {\n  return (dispatch) => {\n    const url = `${API_URL}/login`\n  let data = { user: {username: username, password: password} }\n  fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(res => res.json())\n    .then(data => {\n      if (data.error) {\n        alert(data.message)\n      } else {\n        Cookies.set('token', data.jwt)\n        dispatch(loggedIn(data.user))\n      }\n    })\n  }\n}\n\n// logout\nconst logout = () => ({type: 'LOGGED_OUT'})\n\n\n// fetch user\nconst checkedUser = (userData) => ({type: 'CHECKED_USER', userData})\n\nconst checkingForUser = (token) => {\n  return (dispatch) => {\n    const token = Cookies.get('token')\n    const url =  `${API_URL}/profile`\n    fetch(url, {\n      method: 'GET',\n      headers: {\n        \"Content-Type\":\"application/json\",\n        \"Authorization\":`Bearer ${token}`\n      }\n    })\n      .then(res => res.json())\n      .then(data => {\n        dispatch(checkedUser(data.user))\n      })\n  }\n}\n\n\n// on componentDidMount\nconst receiveMessage = (message) => ({type: 'RECEIVE_MESSAGE', message})\n\nconst createSocket = () => {\n  return (dispatch) => {\n    const token = Cookies.get('token')\n    const url = `ws:${API_URL}/cable`\n    let App = {}\n    App.cable = ActionCable.createConsumer(`${url}?token=${token}`)\n\n    const messagesSubscription = App.cable.subscriptions.create({channel: 'MessagesChannel', conversation_id: store.getState().selectedConversation}, {\n      connected: () => {\n        console.log('connected to messages stream')\n      },\n      disconnected: () => {\n        console.log('disconnected from messages stream')\n      },\n      received: (data) => {\n        // check data object\n        // if it has data.content it's a message\n        // if it doesn't it's a \"{username} is typing (could be stored in data.status)\"\n        dispatch(receiveMessage(data))\n      }\n    })\n      console.log('socket')\n      App.conversations = [messagesSubscription]\n      window.App = App\n  }\n}\n\n// onClick on a particular conversation\nconst fetchedConversation = (selectedConversation) => ({type: 'FETCHED_CONVERSATION', selectedConversation})\n\nconst fetchingConversation = (id) => {\n  return (dispatch) => {\n    fetch(`${API_URL}/conversations/${id}`)\n      .then(res => res.json())\n      .then(data => {\n        dispatch(fetchedConversation(data))\n      })\n  }\n}\n\nconst homepage = () => ({type: 'HOMEPAGE'})\n\n// onKeyDown for Conversation Input\nconst sendMessage = (message) => ({type: 'SEND_MESSAGE', messageInput: message})\n\nconst sendingMessage = (message) => {\n  return (dispatch) => {\n    window.App.conversations[0].send({content: message, conversation_id: store.getState().selectedConversation.id})\n    dispatch(sendMessage(message))\n  }\n}\n\n// fetch all users\nconst fetchedAllUsers = (allUsers) => ({type: 'FETCHED_ALL_USERS', allUsers})\n\nconst fetchingAllUsers = () => {\n  return (dispatch) => {\n    const token = Cookies.get('token')\n    const url = `${API_URL}/users`\n    fetch(url, {\n      method: 'GET',\n      headers: {\n        \"Content-Type\":\"application/json\",\n        \"Authorization\":`Bearer ${token}`\n      }\n    })\n      .then(res => res.json())\n      .then(data => {\n        console.log(data)\n        dispatch(fetchedAllUsers(data))\n      })\n  }\n}\n\n// create new conversation\nconst openNewConversationModal = () => ({type: 'OPEN_NEW_CONVERSATION'})\n\nconst closeNewConversationModal = () => ({type: 'CLOSE_NEW_CONVERSATION'})\n\nconst createdNewConversation = (conversation) => ({type: 'NEW_CONVERSATION', conversation})\n\nconst creatingNewConversation = (payload) => {\n  return (dispatch) => {\n    const token = Cookies.get('token')\n    fetch(`${API_URL}/conversations`, {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        \"Authorization\":`Bearer ${token}`\n      },\n      body: JSON.stringify({topic: payload.topic})\n    })\n      .then(res => res.json())\n      .then(conversationData => {\n        fetch(`${API_URL}/user_conversations`, {\n          method: 'POST',\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\",\n            \"Authorization\":`Bearer ${token}`\n          },\n          body: JSON.stringify({conversation_id: conversationData.conversation.id, user_id: parseInt(payload.userId)})\n        }).then(res => res.json())\n          .then(resData => {\n            fetch(`${API_URL}/user_conversations`, {\n              method: 'POST',\n              headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\",\n                \"Authorization\":`Bearer ${token}`\n              },\n              body: JSON.stringify({conversation_id: resData.userConversation.conversation_id, user_id: store.getState().userData.id})\n            }).then(res => res.json())\n              .then(data => {\n                console.log(conversationData)\n                dispatch(createdNewConversation(conversationData.conversation))\n              })\n          })\n        })\n  }\n}\n\n// fetching all bots\nconst fetchedAllBots = (bots) => ({type: 'FETCHED_ALL_BOTS', bots})\n\nconst fetchingAllBots = () => {\n  return(dispatch) => {\n    const token = Cookies.get('token')\n    fetch(`${API_URL}/bots`, {\n      method: 'GET',\n      headers: {\n        \"Content-Type\":\"application/json\",\n        \"Authorization\":`Bearer ${token}`}\n    }).then(res => res.json())\n      .then(data => {dispatch(fetchedAllBots(data))})\n  }\n}\n\n// add bot to conversation\nconst addedBot = (bot) => ({type: 'ADDED_BOT_TO_CONVERSATION', bot})\n\nconst addingBot = (payload) => {\n  return(dispatch) => {\n    const token = Cookies.get('token')\n    fetch(`${API_URL}/bot_conversations`, {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        \"Authorization\": `Bearer ${token}`\n      },\n      body: JSON.stringify(payload)\n    }).then(res => res.json())\n      .then(data => {\n        fetch(`${API_URL}/bots/${data.botConversation.bot_id}`, {\n          method: 'GET',\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\",\n            \"Authorization\": `Bearer ${token}`\n          }\n        }).then(res => res.json())\n          .then(data => {dispatch(addedBot(data))})\n      }\n    )}\n  }\n\n\n// create new bot\nconst openNewBotModal = () => ({type: 'OPEN_NEW_BOT'})\n\nconst closeNewBotModal = () => ({type: 'CLOSE_NEW_BOT'})\n\nconst createdNewBot = (bot) => ({type: 'CREATED_NEW_BOT', bot})\n\nconst creatingNewBot = (payload) => {\n  return(dispatch) => {\n    const token = Cookies.get('token')\n    fetch(`${API_URL}/bots`, {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        \"Authorization\":`Bearer ${token}`\n      },\n      body: JSON.stringify(payload)\n    }).then(res => res.json())\n      .then(data => dispatch(createdNewBot(data.bot)))\n  }\n}\n\n// edit profile\nconst openProfileModal = () => ({type: 'OPEN_PROFILE_MODAL'})\n\nconst closeProfileModal = () => ({type: 'CLOSE_PROFILE_MODAL'})\n\n// const sendStatus = (message) => ({type: 'SEND_STATUS', messageInput: message})\n//\n// const sendingStatus = (message) => {\n//   // format the status message\n//   return (dispatch) => {\n//     window.App.conversations[0].send({status: message, conversation_id: store.getState().selectedConversation.id})\n//     dispatch(sendMessage(message))\n//   }\n// }\n\nexport { sendingMessage, fetchingConversation, receiveMessage, checkingForUser, loggingIn, logout, createSocket, fetchingAllUsers, creatingNewConversation, openNewConversationModal, closeNewConversationModal, closeNewBotModal, openNewBotModal, openProfileModal, closeProfileModal, fetchingAllBots, creatingNewBot, addingBot, homepage }\n","import React, { Component } from 'react'\nimport { Redirect, Link } from 'react-router-dom'\nimport { Grid, Form, Button, Segment, Message, Image, Header } from 'semantic-ui-react'\nimport { connect } from 'react-redux'\nimport { loggingIn } from '../redux/actions.js'\nimport logo from './login-logo.png'\nconst Cookies = require('cookies-js')\n\n\nclass Login extends Component {\n\n  componentDidMount() {\n    document.body.style.background = '#F7C3B6'\n  }\n\n  render() {\n    return (\n      Cookies.get('token') && this.props.currentUser ? <Redirect to='/conversations' /> :\n      <div className='padded-top-large'>\n        <Grid columns={4} centered style={{paddingTop: '5%'}}>\n        <Grid.Row verticalAlign='top'>\n          <Grid.Column>\n            <Image size='huge' floated='right' src={logo}/>\n          </Grid.Column>\n          </Grid.Row>\n          <Grid.Row verticalAlign='bottom'>\n          <Grid.Column >\n              <Form\n                size='big'\n                onSubmit={(e) => {this.props.onSubmit(e.target.username.value, e.target.password.value)}}>\n                <Segment stacked>\n                  <Form.Input\n                    name='username'\n                    fluid icon='user'\n                    iconPosition='left'\n                    placeholder='Username'\n                   />\n                  <Form.Input\n                   name='password'\n                   fluid\n                   icon='lock'\n                   iconPosition='left'\n                   placeholder='Password'\n                   type='password'\n                   style={{background: '#fcefec'}}\n                   />\n                  <Button\n                    style={{backgroundColor: '#37525F', color: '#CEDEDC'}}\n                    fluid\n                    size='large'\n                    type='submit'\n                  >Login</Button>\n                </Segment>\n              </Form>\n              <Message style={{textAlign: 'center'}}>\n                  New to us? <Link style={{color: '#37525F'}} to='/signup'>Sign up</Link>\n              </Message>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentUser: state.userData\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSubmit: (username, password) => {dispatch(loggingIn(username, password))}\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login)\n","import React, { Component } from 'react'\nimport { Redirect, Link } from 'react-router-dom'\nimport { Grid, Form, Button, Segment, Message, Image, Header } from 'semantic-ui-react'\nimport logo from './signup-logo.png'\nconst Cookies = require('cookies-js')\n\nclass Signup extends Component {\n\n  componentDidMount() {\n    document.body.style.background = '#37525F'\n\n  }\n\n  render() {\n    return (\n      Cookies.get('token') && this.props.currentUser ? <Redirect to='/conversations' /> :\n      <Grid columns={4} centered style={{paddingTop: '5%'}}>\n        <Grid.Row verticalAlign='top'>\n          <Grid.Column>\n            <Image size='huge' floated='right' src={logo}/>\n\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row verticalAlign='bottom'>\n        <Grid.Column >\n            <Form\n              size='large'\n              onSubmit={(e) => {this.props.onSubmit(e.target.username.value, e.target.password.value)}}>\n              <Segment stacked>\n                <Form.Input\n                  name='username'\n                  fluid icon='user'\n                  iconPosition='left'\n                  placeholder='Username'\n                 />\n                 <Form.Input\n                   name='name'\n                   fluid icon='user outline'\n                   iconPosition='left'\n                   placeholder='Display name'\n                  />\n                 <Form.Input\n                  name='avatar'\n                  fluid\n                  icon='photo'\n                  iconPosition='left'\n                  placeholder='Avatar URL'\n                  />\n                  <Form.Input\n                   name='password'\n                   fluid\n                   icon='lock'\n                   iconPosition='left'\n                   placeholder='Password'\n                   type='password'\n                   />\n                <Button\n                  style={{backgroundColor: '#F7C3B6', color: '#37525F'}}\n                  fluid\n                  size='large'\n                  type='submit'\n                >Sign in</Button>\n              </Segment>\n            </Form>\n            <Message style={{textAlign: 'center'}}>\n                Already a member? <Link style={{color: '#37525F'}} to='/login'>Log in</Link>\n            </Message>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    )\n  }\n}\n\nexport default Signup\n","import React, { Component } from 'react'\nimport { List, Image } from 'semantic-ui-react'\n\n\nclass Message extends Component {\n\n  render() {\n    return (\n      <List.Item style={{marginBottom: '2px'}}>\n        <Image avatar src={this.props.message.avatar}/>\n        <List.Content>\n          <List.Header>{this.props.message.user_name}</List.Header>\n          <List.Description>\n            {this.props.message.content}\n          </List.Description>\n        </List.Content>\n      </List.Item>\n    )\n  }\n}\n\nexport default Message\n","import React, { Component } from 'react'\nimport { Form } from 'semantic-ui-react'\nimport { connect } from 'react-redux'\nimport { sendingMessage } from '../redux/actions.js'\n\nclass Input extends Component {\n\n  state = {\n    text: ''\n  }\n\n  onChange = (e) => {\n    this.setState({text: e.target.value})\n  }\n\n  onSubmit = (e) => {\n    e.preventDefault()\n  }\n\n  render() {\n    return (\n        <Form\n          onSubmit={this.onSubmit}\n          style={{backgroundColor: '#f9dcd6'}}\n        >\n          <Form.Input\n            placeholder='start typing...'\n            style={{ backgroundColor: '#fcefec' }}\n            onChange={this.onChange}\n            onKeyDown={(e) => {\n              if (e.keyCode === 13) {\n                this.props.onKeyDown(e.target.value)\n                this.setState({text:''})\n              }\n            }\n          }\n          value={this.state.text}\n          />\n        </ Form>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onKeyDown: (message) => {dispatch(sendingMessage(message))}\n  }\n}\n\n\nexport default connect(null, mapDispatchToProps)(Input)\n","import React, { Component } from 'react'\nimport Message from './Message'\nimport Input from './Input'\nimport { Segment, Grid, List, Image } from 'semantic-ui-react'\nimport { connect } from 'react-redux'\nimport welcome from './welcome.gif'\n\nclass MessagesContainer extends Component {\n  render() {\n    return (\n      this.props.selectedConversation ?\n      <Grid.Column width={8}>\n        <Segment\n          style={{\n            height: '140%',\n            overflowY: 'scroll'\n          }} >\n          <List>\n            {this.props.selectedConversation.messages.map(m => (\n              <Message key={m.id} message={m}/>\n            ))}\n          </List>\n        </ Segment>\n        <Segment>\n          <Input />\n        </Segment>\n      </Grid.Column>\n      :\n      <Grid.Column width={8}>\n        <Segment style ={{height: '120%'}}>\n          <Image src={welcome} fluid/>\n        </Segment>\n      </Grid.Column>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    selectedConversation: state.selectedConversation,\n    currentUser: state.userData\n  }\n}\n\nexport default connect(mapStateToProps)(MessagesContainer)\n","import React, { Component } from 'react'\nimport { Segment } from 'semantic-ui-react'\nimport { connect } from 'react-redux'\nimport { fetchingConversation } from '../redux/actions.js'\n\nclass Conversation extends Component {\n  render() {\n    return (\n      <Segment\n        onClick={() => this.props.onClick(this.props.conversation.id)}\n      >\n          {this.props.conversation.topic}\n      </Segment>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onClick: (id) => {dispatch(fetchingConversation(id))}\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(Conversation)\n","import React, { Component } from 'react'\nimport Conversation from './Conversation'\nimport { Grid } from 'semantic-ui-react'\nimport { connect } from 'react-redux'\nimport { createSocket } from '../redux/actions.js'\n\nclass ConversationContainer extends Component {\n\n  componentDidMount() {\n    this.props.createSocket()\n  }\n\n  render() {\n    return (\n      <Grid.Column width={4} >\n      {this.props.conversations ?\n        this.props.conversations.map(c => (\n            <Conversation\n              key={c.id}\n              conversation={c}\n            />)) : null\n        }\n      </Grid.Column>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    conversations: state.userData.conversations\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    createSocket: () => {dispatch(createSocket())}\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConversationContainer)\n","import React, { Component } from 'react'\nimport { Dropdown, Modal, Image, Header, Button } from 'semantic-ui-react'\nimport { connect } from 'react-redux'\nimport { addingBot } from '../redux/actions.js'\n\nclass BotInfo extends Component {\n\n  state = {\n    bot: this.props.bot,\n    open: false\n  }\n\n  onButtonClick = () => {\n    let payload = {\n      bot_id: this.state.bot.id,\n      conversation_id: this.props.selectedConversation.id\n    }\n    this.props.addingBot(payload)\n    this.setState({open: false})\n  }\n\n  render() {\n    return (\n      <Modal\n        size='small'\n        open={this.state.open}\n        trigger={\n          <Dropdown.Item\n            onClick={() => this.setState({open: true})}>\n            {this.props.bot.name}\n          </Dropdown.Item>\n        }>\n          <Modal.Header>{this.props.bot.name}</Modal.Header>\n          <Modal.Content image>\n            <Image\n              wrapped\n              size='medium'\n              src={this.props.bot.avatar}\n            />\n            <Modal.Description>\n              <Header>Trigger:</Header>\n              <p>/{this.props.bot.trigger}</p>\n              <Header>Response:</Header>\n              <p>{this.props.bot.response}</p>\n            </Modal.Description>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button\n              style={{backgroundColor: '#37525F', color: '#CEDEDC'}}\n              onClick={() => this.setState({open: false})}\n              size='small'\n            > Cancel </Button>\n            <Button\n              style={{backgroundColor: '#37525F', color: '#CEDEDC'}}\n              onClick={() => this.onButtonClick()}\n              size='small'\n            > Add </Button>\n          </Modal.Actions>\n      </Modal>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    selectedConversation: state.selectedConversation\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addingBot: (payload) => {dispatch(addingBot(payload))}\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BotInfo)\n","import React, { Component } from 'react'\nimport BotInfo from './BotInfo'\nimport { Segment, Grid, List, Image, Header, Dropdown } from 'semantic-ui-react'\nimport { connect } from 'react-redux'\n\nclass ConversationInfo extends Component {\n\n  filterBots(){\n    if (this.props.selectedConversation) {\n      debugger\n      return this.props.allBots.filter(bot => !!this.props.selectedConversation.bots.includes(bot))\n    } else {\n      return this.props.allBots\n    }\n  }\n\n  render() {\n    return (\n      this.props.selectedConversation ?\n      <Grid.Column width={4}>\n        <Segment>\n          <List size='large' verticalAlign='middle'>\n            <Header style={{color: '#37525F'}}>{this.props.selectedConversation.topic}</Header>\n            <Header>Participants:</Header>\n            {this.props.selectedConversation.users.map(user => {\n              return (\n                <List.Item key={user.id}>\n                  <Image avatar src={user.avatar}/>\n                  <List.Content>\n                    <List.Header>{user.name}</List.Header>\n                  </List.Content>\n                </List.Item>\n              )\n            })}\n            <Header>Bots:</Header>\n            {this.props.selectedConversation.bots.map(bot => {\n              return (\n              <List.Item key={bot.id}>\n                <Image avatar src={bot.avatar}/>\n                <List.Content>\n                  <List.Header>{bot.name}</List.Header>\n                </List.Content>\n              </List.Item>\n            )})}\n            </List>\n            <Segment inverted style={{backgroundColor: '#37525F'}}>\n            <Dropdown\n              text='Add Bot'\n              className='link item'\n            >\n              <Dropdown.Menu>\n                {this.props.allBots.map(bot => {\n                    return (<BotInfo key={bot.id} bot={bot}/>)\n                  })}\n              </Dropdown.Menu>\n            </Dropdown>\n          </Segment>\n        </Segment>\n      </Grid.Column> : null\n    )\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    selectedConversation: state.selectedConversation,\n    allBots: state.allBots\n  }\n}\n\nexport default connect(mapStateToProps)(ConversationInfo)\n","import React, { Component } from 'react';\nimport MessagesContainer from './MessagesContainer'\nimport ConversationsContainer from './ConversationsContainer'\nimport ConversationInfo from './ConversationInfo'\nimport { Redirect } from 'react-router-dom'\nimport { Grid } from 'semantic-ui-react'\nimport {connect} from 'react-redux'\nimport {fetchingAllBots} from '../redux/actions.js'\n\n\nclass Homepage extends Component {\n\n  componentDidMount() {\n    this.props.fetchingAllBots()\n  }\n\n  render(){\n  return (\n    this.props.currentUser ? (\n      <Grid columns={2} padded >\n        <Grid.Row>\n          <ConversationsContainer />\n          <MessagesContainer />\n          <ConversationInfo />\n        </ Grid.Row>\n      </Grid>\n      ) : <Redirect to='/login' />\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentUser: state.userData\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchingAllBots: () => {dispatch(fetchingAllBots())}\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Homepage)\n","import React, { Component } from 'react'\n\nclass NotFound extends Component {\n  render() {\n    return (\n    <div className='not-found' style={{height: '100vh', backgroundColor: '#F7C3B6'}}>\n      <div className='not-found-text' style={{height: '100%', color: '#37525f', textAlign: 'center', verticalAlign: 'middle', paddingTop: '15%'}}>\n        <p style={{fontSize: '40px',}}>\n          Page not found!\n        </p>\n      </div>\n      </div>\n    )\n  }\n}\n\n// add back button to this page\n// <a href='' style={{fontSize: '20px', textDecoration: 'underline', color: '#37525f'}}>\n//   Back\n// </a>\n\nexport default NotFound\n","import React, { Component } from 'react'\nimport { Button, Header, Form, Modal, Select } from 'semantic-ui-react'\nimport { connect } from 'react-redux'\nimport { fetchingAllUsers, creatingNewConversation, closeNewConversationModal } from '../redux/actions.js'\n\nclass NewConversation extends Component {\n\n  state = {\n    topic: '',\n    userId: null\n  }\n\n  componentDidMount() {\n    this.props.fetchingAllUsers()\n  }\n\n  inputChange = (e) => {\n    this.setState({topic: e.target.value})\n  }\n\n  dropdownChange = (e) => {\n    this.setState({userId: e.target.id})\n  }\n\n  formSubmit = () => {\n    let data = {\n      topic: this.state.topic,\n      userId: this.state.userId\n    }\n    console.log(data)\n    this.props.creatingNewConversation(data)\n    this.props.closeNewConversationModal()\n  }\n\n  render() {\n    let filteredUsers = this.props.allUsers.filter(user => user.id !== this.props.currentUser.id)\n    console.log(filteredUsers)\n    let allUsers = filteredUsers.map(user => {\n      return {\n        id: user.id,\n        text: user.name,\n        value: user.id,\n        image: {avatar: true, src: user.avatar}\n      }\n    })\n\n    return (\n        <Modal.Content>\n          <Header>Topic:</Header>\n          <Form id=\"newConversationForm\" onSubmit={this.formSubmit}>\n            <Form.Input\n              onChange={this.inputChange}\n              placeholder='Topic'\n            />\n            <Header>To:</Header>\n            <Form.Input\n              control={Select}\n              placeholder='Select a person'\n              fluid\n              selection\n              options={allUsers}\n              onChange={this.dropdownChange}\n            />\n            <Button\n              fluid\n              size='small'\n              content='Create'\n              style={{backgroundColor: '#37525F', color: '#CEDEDC'}}\n            />\n          </Form>\n        </Modal.Content>\n    )\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    allUsers: state.allUsers,\n    currentUser: state.userData\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchingAllUsers: () => {dispatch(fetchingAllUsers())},\n    creatingNewConversation: (data) => {dispatch(creatingNewConversation(data))},\n    closeNewConversationModal: () => {dispatch(closeNewConversationModal())}\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewConversation)\n","import React, { Component } from 'react'\nimport { Button, Modal, Header, Form } from 'semantic-ui-react'\nimport { connect } from 'react-redux'\nimport { closeNewBotModal, creatingNewBot } from '../redux/actions.js'\n\nclass BotForm extends Component {\n  state = {\n    name: '',\n    trigger: '',\n    response: '',\n    avatar: ''\n  }\n\n  handleName = (e) => {\n    this.setState({name: e.target.value})\n  }\n\n  handleTrigger = (e) => {\n    this.setState({trigger: e.target.value})\n  }\n\n  handleResponse = (e) => {\n    this.setState({response: e.target.value})\n  }\n\n  handleAvatar = (e) => {\n    this.setState({avatar: e.target.value})\n  }\n\n  formSubmit = () => {\n    let payload = this.state\n    this.props.creatingNewBot(payload)\n    this.props.closeNewBotModal()\n  }\n\n  render() {\n    return (\n      <Modal.Content>\n        <Header>Bot name:</Header>\n        <Form onSubmit={this.formSubmit}>\n          <Form.Input\n            placeholder='Bot name'\n            onChange={this.handleName}\n          />\n          <Header>Trigger:</Header>\n          <p>Trigger should be a single word.</p>\n          <Form.Input\n            placeholder='Trigger'\n            onChange={this.handleTrigger}\n          />\n          <Header>Response:</Header>\n          <p>Response can be a word or a sentence.</p>\n          <Form.Input\n            placeholder='Response'\n            onChange={this.handleResponse}\n          />\n          <Header>Avatar:</Header>\n          <Form.Input\n            placeholder='URL'\n            onChange={this.handleAvatar}\n          />\n          <Button\n            fluid\n            size='small'\n            content='Create'\n            style={{backgroundColor: '#37525F', color: '#CEDEDC'}}\n          />\n        </Form>\n      </Modal.Content>\n    )\n  }\n\n}\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    closeNewBotModal: () => {dispatch(closeNewBotModal())},\n    creatingNewBot: (payload) => {dispatch(creatingNewBot(payload))}\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(BotForm)\n","import React, { Component } from 'react'\nimport { Header, Modal, Image } from 'semantic-ui-react'\nimport { connect } from 'react-redux'\nimport { closeProfileModal } from '../redux/actions.js'\n\n\nclass Profile extends Component {\n  // state = {\n  //   name: this.props.userData.name,\n  //   avatar: this.props.userData.avatar\n  // }\n  //\n  // handleName = (e) => {\n  //   this.setState({name: e.target.value})\n  // }\n  //\n  // handleAvatar = (e) => {\n  //   this.setState({avatar: e.target.value})\n  // }\n  //\n  // formSubmit = (e) => {\n  //   console.log(e)\n  // }\n\n// IF THERE'S ENOUGH TIME TO DO PATCH REQUEST\n  // <Form onSubmit={this.formSubmit}>\n  //   <Form.Input\n  //     value={this.state.name}\n  //     onChange={this.handleName}\n  //     placeholder='Display name'\n  //   />\n    // <Header>Avatar:</Header>\n    // <Form.Input\n    //   value={this.state.avatar}\n    //   placeholder='URL'\n    //   onChange={this.handleAvatar}\n    // />\n    // <Button\n  //     fluid\n  //     size='small'\n  //     content='Create'\n  //     color='orange'\n  //     onClick={this.props.closeProfileModal}\n  //   />\n  // </Form>\n\n\n  render() {\n    return(\n      <Modal.Content image>\n        <Image\n          wrapped\n          size='medium'\n          src={this.props.userData.avatar}\n        />\n        <Modal.Description>\n          <Header>Display Name:</Header>\n          <p>{this.props.userData.name}</p>\n          <Header>Username:</Header>\n          <p>{this.props.userData.username}</p>\n        </Modal.Description>\n      </Modal.Content>\n    )\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    userData: state.userData\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    closeProfileModal: () => {dispatch(closeProfileModal())}\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile)\n","import React, { Component } from 'react'\nimport { Menu, Modal } from 'semantic-ui-react'\nimport { connect } from 'react-redux'\nimport { logout, openNewConversationModal, closeNewConversationModal, openNewBotModal, closeNewBotModal, openProfileModal, closeProfileModal, homepage } from '../redux/actions.js'\nimport NewConversation from './NewConversation'\nimport BotForm from './BotForm'\nimport Profile from './Profile'\nimport logo from './logo-pink.png'\n\n\nclass Navbar extends Component {\n\n// style={{backgroundColor: '#286262'}}\n  render() {\n    return (\n      <Menu style={{backgroundColor: '#37525F', color: '#CEDEDC'}} inverted>\n        <Menu.Item onClick={this.props.homepage}>\n          <img src={logo} alt='logo'/>\n        </Menu.Item>\n        <Modal\n          size='small'\n          trigger={<Menu.Item\n                      name='Create conversation'\n                      onClick={this.props.openNewConversationModal}\n                    />}\n          open={this.props.conversationModal}\n          onClose={this.props.closeNewConversationModal}\n        >\n          <Modal.Header> Create a New Conversation </Modal.Header>\n          <NewConversation />\n        </Modal>\n        <Modal\n          size='small'\n          trigger={<Menu.Item\n                      name='create bot'\n                      onClick={this.props.openNewBotModal}/>}\n          open={this.props.newBotModal}\n          onClose={this.props.closeNewBotModal}\n        >\n          <Modal.Header> Create a New Bot </Modal.Header>\n          <BotForm/>\n        </Modal>\n        <Menu.Menu position='right'>\n        <Modal\n          size='small'\n          trigger={<Menu.Item\n                      name='profile'\n                      onClick={this.props.openProfileModal}\n                      />}\n          open={this.props.profileModal}\n          onClose={this.props.closeProfileModal}\n        >\n        <Modal.Header> Profile </Modal.Header>\n        <Profile/>\n        </Modal>\n          <Menu.Item\n            name='logout'\n            onClick={this.props.logout}\n          />\n        </ Menu.Menu>\n      </Menu>\n    )\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    conversationModal: state.conversationModal,\n    newBotModal: state.newBotModal,\n    profileModal: state.profileModal,\n    allBots: state.allBots,\n    userData: state.userData\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    logout: () => {dispatch(logout())},\n    openNewConversationModal : () => {dispatch(openNewConversationModal())},\n    closeNewConversationModal: () => {dispatch(closeNewConversationModal())},\n    openNewBotModal: () => {dispatch(openNewBotModal())},\n    closeNewBotModal: () => {dispatch(closeNewBotModal())},\n    openProfileModal: () => {dispatch(openProfileModal())},\n    closeProfileModal: () => {dispatch(closeProfileModal())},\n    homepage: () => {dispatch(homepage())}\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Navbar)\n","import React, { Component, Fragment } from 'react'\nimport {BrowserRouter, Route, Switch, Redirect, withRouter} from 'react-router-dom'\nimport withLoader from './components/withLoader'\nimport Login from './components/Login'\nimport Signup from './components/Signup'\nimport Homepage from './components/Homepage'\nimport NotFound from './components/NotFound'\nimport Navbar from './components/Navbar'\nimport {Sticky} from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.css'\nimport { connect } from 'react-redux'\nimport { createSocket, checkingForUser } from './redux/actions.js'\nconst Cookies = require('cookies-js')\n\n\nclass App extends Component {\n\n  componentDidMount() {\n    if (Cookies.get('token')) {\n      this.props.checkingUser()\n    }\n  }\n\n  render() {\n    return (\n      <Fragment>\n      {this.props.currentUser ? (\n        <Sticky>\n          <Navbar />\n        </Sticky>\n      ) : null}\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n          <Switch>\n            <Route exact path=\"/\" render={() => <Redirect to='/login'/>} />\n            <Route exact path=\"/login\" render={() => <Login />} />\n            <Route exact path=\"/signup\" component={Signup} />\n            <Route exact path=\"/conversations\" render={() => <Homepage />} />\n            <Route component={NotFound} />\n          </Switch>\n        </BrowserRouter>\n      </ Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentUser: state.userData\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    createSocket: () => {dispatch(createSocket())},\n    checkingUser: (token) => {dispatch(checkingForUser(token))}\n  }\n}\n\nexport default withLoader(withRouter(connect(mapStateToProps, mapDispatchToProps)(App)));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\"\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nReactDOM.render(\n  <Provider store={store} >\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </ Provider>,\n  document.getElementById('root'));\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo-pink.8a553ee2.png\";"],"sourceRoot":""}